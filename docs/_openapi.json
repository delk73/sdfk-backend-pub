{"timestamp": "2025-08-27 07:56:29,738", "level": "INFO", "name": "app.models.db", "message": "Using database from env: sqlite:////home/dce/src/sdfk-backend/docs/_audit.db?check_same_thread=False", "request_id": "no-request-id"}
{"timestamp": "2025-08-27 07:56:29,739", "level": "INFO", "name": "app.models.db", "message": "Database dialect in use: sqlite", "request_id": "no-request-id"}
{
  "components": {
    "schemas": {
      "ActionType": {
        "properties": {
          "axis": {
            "$ref": "#/components/schemas/AxisType"
          },
          "curve": {
            "$ref": "#/components/schemas/CurveType",
            "default": "linear"
          },
          "scale": {
            "default": 1.0,
            "title": "Scale",
            "type": "number"
          },
          "sensitivity": {
            "title": "Sensitivity",
            "type": "number"
          }
        },
        "required": [
          "axis",
          "sensitivity"
        ],
        "title": "ActionType",
        "type": "object"
      },
      "ApplyModulationRequest": {
        "description": "Request model for applying a modulation to an asset parameter.",
        "example": {
          "asset_id": "asset_123",
          "definition": {
            "amplitude": 0.1,
            "frequency": 0.5,
            "id": "radius_pulse",
            "max": 1.0,
            "min": 0.0,
            "offset": 0.5,
            "phase": 0.0,
            "scale": 1.0,
            "scaleProfile": "linear",
            "target": "shader.u_r",
            "type": "additive",
            "waveform": "triangle"
          },
          "modulation_id": "radius_pulse"
        },
        "properties": {
          "asset_id": {
            "description": "Unique identifier of the asset to modulate",
            "examples": [
              "asset_123"
            ],
            "minLength": 1,
            "title": "Asset Id",
            "type": "string"
          },
          "definition": {
            "description": "Modulation definition including target, waveform, and parameters",
            "examples": [
              {
                "amplitude": 0.1,
                "frequency": 0.5,
                "id": "radius_pulse",
                "max": 1.0,
                "min": 0.0,
                "offset": 0.5,
                "phase": 0.0,
                "scale": 1.0,
                "scaleProfile": "linear",
                "target": "shader.u_r",
                "type": "additive",
                "waveform": "triangle"
              }
            ],
            "title": "Definition",
            "type": "object"
          },
          "modulation_id": {
            "description": "Unique identifier for this modulation",
            "examples": [
              "radius_pulse"
            ],
            "minLength": 1,
            "title": "Modulation Id",
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "modulation_id",
          "definition"
        ],
        "title": "ApplyModulationRequest",
        "type": "object"
      },
      "ApplyModulationResponse": {
        "description": "Response model for modulation application.",
        "example": {
          "message": "Modulation applied successfully",
          "request_id": "req_ghi789jkl012",
          "result": {
            "applied": true,
            "asset_id": "asset_123",
            "definition": {
              "amplitude": 0.1,
              "frequency": 0.5,
              "id": "radius_pulse",
              "target": "shader.u_r",
              "type": "additive",
              "waveform": "triangle"
            },
            "modulation_id": "radius_pulse"
          },
          "status": "success"
        },
        "properties": {
          "message": {
            "description": "Human-readable status message",
            "examples": [
              "Operation completed successfully"
            ],
            "title": "Message",
            "type": "string"
          },
          "request_id": {
            "description": "Unique request identifier for tracing",
            "examples": [
              "req_abc123def456"
            ],
            "title": "Request Id",
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/ApplyModulationResult",
            "description": "Detailed modulation result"
          },
          "status": {
            "description": "Operation status",
            "examples": [
              "success"
            ],
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "request_id",
          "status",
          "message",
          "result"
        ],
        "title": "ApplyModulationResponse",
        "type": "object"
      },
      "ApplyModulationResult": {
        "description": "Result payload for modulation application.",
        "example": {
          "applied": true,
          "asset_id": "asset_123",
          "definition": {
            "amplitude": 0.1,
            "frequency": 0.5,
            "id": "radius_pulse",
            "target": "shader.u_r",
            "type": "additive",
            "waveform": "triangle"
          },
          "modulation_id": "radius_pulse"
        },
        "properties": {
          "applied": {
            "description": "Whether the modulation was successfully applied",
            "examples": [
              true
            ],
            "title": "Applied",
            "type": "boolean"
          },
          "asset_id": {
            "description": "Asset identifier that was modulated",
            "examples": [
              "asset_123"
            ],
            "title": "Asset Id",
            "type": "string"
          },
          "definition": {
            "description": "Applied modulation definition",
            "examples": [
              {
                "amplitude": 0.1,
                "frequency": 0.5,
                "id": "radius_pulse",
                "target": "shader.u_r",
                "type": "additive",
                "waveform": "triangle"
              }
            ],
            "title": "Definition",
            "type": "object"
          },
          "modulation_id": {
            "description": "Modulation identifier that was applied",
            "examples": [
              "radius_pulse"
            ],
            "title": "Modulation Id",
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "modulation_id",
          "definition",
          "applied"
        ],
        "title": "ApplyModulationResult",
        "type": "object"
      },
      "AxisType": {
        "enum": [
          "mouse.x",
          "mouse.y",
          "mouse.wheel"
        ],
        "title": "AxisType",
        "type": "string"
      },
      "Body_import_bundle_rule_bundles_import_post": {
        "properties": {
          "file": {
            "format": "binary",
            "title": "File",
            "type": "string"
          }
        },
        "required": [
          "file"
        ],
        "title": "Body_import_bundle_rule_bundles_import_post",
        "type": "object"
      },
      "CacheStatus": {
        "properties": {
          "cache_enabled": {
            "title": "Cache Enabled",
            "type": "boolean"
          }
        },
        "required": [
          "cache_enabled"
        ],
        "title": "CacheStatus",
        "type": "object"
      },
      "ComboType": {
        "properties": {
          "keys": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Keys"
          },
          "mouseButtons": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mousebuttons"
          },
          "strict": {
            "default": false,
            "title": "Strict",
            "type": "boolean"
          },
          "wheel": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Wheel"
          }
        },
        "title": "ComboType",
        "type": "object"
      },
      "Control-Input": {
        "properties": {
          "default": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ],
            "title": "Default"
          },
          "label": {
            "minLength": 1,
            "title": "Label",
            "type": "string"
          },
          "mappings": {
            "items": {
              "$ref": "#/components/schemas/Mapping-Input"
            },
            "title": "Mappings",
            "type": "array"
          },
          "max": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max"
          },
          "min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min"
          },
          "options": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options"
          },
          "parameter": {
            "minLength": 1,
            "title": "Parameter",
            "type": "string"
          },
          "smoothingTime": {
            "default": 0.0,
            "title": "Smoothingtime",
            "type": "number"
          },
          "step": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Step"
          },
          "type": {
            "$ref": "#/components/schemas/DataType"
          },
          "unit": {
            "minLength": 1,
            "title": "Unit",
            "type": "string"
          }
        },
        "required": [
          "parameter",
          "label",
          "type",
          "unit",
          "default",
          "mappings"
        ],
        "title": "Control",
        "type": "object"
      },
      "Control-Output": {
        "properties": {
          "default": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ],
            "title": "Default"
          },
          "label": {
            "minLength": 1,
            "title": "Label",
            "type": "string"
          },
          "mappings": {
            "items": {
              "$ref": "#/components/schemas/Mapping-Output"
            },
            "title": "Mappings",
            "type": "array"
          },
          "max": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max"
          },
          "min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min"
          },
          "options": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options"
          },
          "parameter": {
            "minLength": 1,
            "title": "Parameter",
            "type": "string"
          },
          "smoothingTime": {
            "default": 0.0,
            "title": "Smoothingtime",
            "type": "number"
          },
          "step": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Step"
          },
          "type": {
            "$ref": "#/components/schemas/DataType"
          },
          "unit": {
            "minLength": 1,
            "title": "Unit",
            "type": "string"
          }
        },
        "required": [
          "parameter",
          "label",
          "type",
          "unit",
          "default",
          "mappings"
        ],
        "title": "Control",
        "type": "object"
      },
      "ControlCreate": {
        "properties": {
          "control_parameters": {
            "description": "List of control parameters with their mappings",
            "examples": [
              {
                "default": 0.0,
                "label": "Wave X",
                "mappings": [
                  {
                    "action": {
                      "axis": "mouse.x",
                      "curve": "linear",
                      "scale": 1.0,
                      "sensitivity": 0.002
                    },
                    "combo": {
                      "mouseButtons": [
                        "left"
                      ],
                      "strict": true
                    }
                  }
                ],
                "max": 1.0,
                "min": -1.0,
                "parameter": "visual.u_wave_x",
                "smoothingTime": 0.1,
                "step": 0.01,
                "type": "float",
                "unit": "linear"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Control-Input"
            },
            "title": "Control Parameters",
            "type": "array"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Metadata about the control",
            "examples": [
              {
                "category": "control",
                "complexity": "medium",
                "tags": [
                  "interactive",
                  "transform"
                ]
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "description": "Name of the control",
            "minLength": 1,
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name",
          "control_parameters"
        ],
        "title": "ControlCreate",
        "type": "object"
      },
      "ControlResponse": {
        "example": {
          "control_id": 1,
          "control_parameters": [
            {
              "default": 0.0,
              "label": "Wave X",
              "mappings": [
                {
                  "action": {
                    "axis": "mouse.x",
                    "curve": "linear",
                    "scale": 1.0,
                    "sensitivity": 0.002
                  },
                  "combo": {
                    "mouseButtons": [
                      "left"
                    ],
                    "strict": true
                  }
                }
              ],
              "max": 1.0,
              "min": -1.0,
              "parameter": "visual.u_wave_x",
              "smoothingTime": 0.1,
              "step": 0.01,
              "type": "float",
              "unit": "linear"
            }
          ],
          "description": "Interactive controls for shape transformation",
          "meta_info": {
            "category": "control",
            "complexity": "medium",
            "tags": [
              "interactive",
              "transform"
            ]
          },
          "name": "Example Controls"
        },
        "properties": {
          "control_id": {
            "title": "Control Id",
            "type": "integer"
          },
          "control_parameters": {
            "description": "List of control parameters with their mappings",
            "examples": [
              {
                "default": 0.0,
                "label": "Wave X",
                "mappings": [
                  {
                    "action": {
                      "axis": "mouse.x",
                      "curve": "linear",
                      "scale": 1.0,
                      "sensitivity": 0.002
                    },
                    "combo": {
                      "mouseButtons": [
                        "left"
                      ],
                      "strict": true
                    }
                  }
                ],
                "max": 1.0,
                "min": -1.0,
                "parameter": "visual.u_wave_x",
                "smoothingTime": 0.1,
                "step": 0.01,
                "type": "float",
                "unit": "linear"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Control-Output"
            },
            "title": "Control Parameters",
            "type": "array"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Metadata about the control",
            "examples": [
              {
                "category": "control",
                "complexity": "medium",
                "tags": [
                  "interactive",
                  "transform"
                ]
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "description": "Name of the control",
            "minLength": 1,
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name",
          "control_parameters",
          "control_id"
        ],
        "title": "ControlResponse",
        "type": "object"
      },
      "CreateAssetRequest": {
        "description": "Request model for creating a new synesthetic asset via MCP.",
        "example": {
          "description": "A circular pattern with synchronized audio and haptic feedback",
          "haptic": {
            "device": {
              "options": {
                "intensity": {
                  "unit": "percentage",
                  "value": 0.7
                }
              },
              "type": "gamepad"
            },
            "name": "Pulse Feedback",
            "parameters": [
              {
                "name": "intensity",
                "parameter": "intensity",
                "path": "haptic.intensity",
                "type": "float"
              }
            ]
          },
          "name": "Circle Harmony",
          "shader": {
            "fragment_shader": "uniform float u_time; void main() { gl_FragColor = vec4(sin(u_time), 0.5, 1.0, 1.0); }",
            "name": "CircleSDF",
            "uniforms": [
              {
                "default": 0.0,
                "name": "u_time",
                "stage": "fragment",
                "type": "float"
              }
            ]
          },
          "tags": [
            "geometric",
            "interactive",
            "multimodal"
          ],
          "tone": {
            "name": "Dreamy Pluck",
            "synth": {
              "polyphony": 4,
              "type": "Tone.PolySynth",
              "voice": {
                "options": {
                  "envelope": {
                    "attack": 0.05,
                    "decay": 0.3,
                    "release": 1.2,
                    "sustain": 0.2
                  },
                  "oscillator": {
                    "type": "square"
                  }
                },
                "type": "Tone.MonoSynth"
              },
              "volume": -10
            }
          }
        },
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional description of the asset's purpose and behavior",
            "examples": [
              "A circular pattern with synchronized audio and haptic feedback"
            ],
            "title": "Description"
          },
          "haptic": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional haptic feedback configuration",
            "examples": [
              {
                "device": {
                  "type": "gamepad"
                },
                "name": "Pulse Feedback"
              }
            ],
            "title": "Haptic"
          },
          "name": {
            "description": "Name of the synesthetic asset",
            "examples": [
              "Circle Harmony"
            ],
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "shader": {
            "description": "Shader configuration for visual rendering",
            "examples": [
              {
                "fragment_shader": "uniform float u_time; void main() { gl_FragColor = vec4(sin(u_time), 0.5, 1.0, 1.0); }",
                "name": "CircleSDF"
              }
            ],
            "title": "Shader",
            "type": "object"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional tags for categorization and discovery",
            "examples": [
              [
                "geometric",
                "interactive",
                "multimodal"
              ]
            ],
            "title": "Tags"
          },
          "tone": {
            "description": "Tone/audio configuration for the asset",
            "examples": [
              {
                "name": "Dreamy Pluck",
                "synth": {
                  "polyphony": 4,
                  "type": "Tone.PolySynth"
                }
              }
            ],
            "title": "Tone",
            "type": "object"
          }
        },
        "required": [
          "name",
          "tone",
          "shader"
        ],
        "title": "CreateAssetRequest",
        "type": "object"
      },
      "CreateAssetResponse": {
        "description": "Response model for asset creation.",
        "example": {
          "asset_id": "asset_a1b2c3d4",
          "message": "Asset created successfully",
          "request_id": "req_abc123def456",
          "result": {
            "asset_id": "asset_a1b2c3d4",
            "components": {
              "haptic": false,
              "shader": true,
              "tone": true
            },
            "status": "created"
          },
          "status": "success"
        },
        "properties": {
          "asset_id": {
            "description": "Generated unique identifier for the created asset",
            "examples": [
              "asset_a1b2c3d4"
            ],
            "title": "Asset Id",
            "type": "string"
          },
          "message": {
            "description": "Human-readable status message",
            "examples": [
              "Operation completed successfully"
            ],
            "title": "Message",
            "type": "string"
          },
          "request_id": {
            "description": "Unique request identifier for tracing",
            "examples": [
              "req_abc123def456"
            ],
            "title": "Request Id",
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/CreateAssetResult",
            "description": "Detailed creation result"
          },
          "status": {
            "description": "Operation status",
            "examples": [
              "success"
            ],
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "request_id",
          "status",
          "message",
          "asset_id",
          "result"
        ],
        "title": "CreateAssetResponse",
        "type": "object"
      },
      "CreateAssetResult": {
        "description": "Result payload for asset creation.",
        "example": {
          "asset_id": "asset_a1b2c3d4",
          "components": {
            "haptic": false,
            "shader": true,
            "tone": true
          },
          "status": "created"
        },
        "properties": {
          "asset_id": {
            "description": "Generated unique identifier for the created asset",
            "examples": [
              "asset_a1b2c3d4"
            ],
            "title": "Asset Id",
            "type": "string"
          },
          "components": {
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "Map of component types to presence flags",
            "examples": [
              {
                "haptic": false,
                "shader": true,
                "tone": true
              }
            ],
            "title": "Components",
            "type": "object"
          },
          "status": {
            "description": "Creation status",
            "examples": [
              "created"
            ],
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "status",
          "components"
        ],
        "title": "CreateAssetResult",
        "type": "object"
      },
      "CurveType": {
        "enum": [
          "linear",
          "exponential",
          "sine",
          "discrete"
        ],
        "title": "CurveType",
        "type": "string"
      },
      "DataType": {
        "enum": [
          "float",
          "int",
          "bool",
          "string"
        ],
        "title": "DataType",
        "type": "string"
      },
      "DeviceConfig": {
        "properties": {
          "options": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DeviceOptionValue"
            },
            "description": "Device-specific configuration options",
            "title": "Options",
            "type": "object"
          },
          "type": {
            "description": "Type of haptic device",
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "type",
          "options"
        ],
        "title": "DeviceConfig",
        "type": "object"
      },
      "DeviceOptionValue": {
        "properties": {
          "unit": {
            "description": "Unit of measurement for the option",
            "title": "Unit",
            "type": "string"
          },
          "value": {
            "description": "Value of the device option",
            "title": "Value",
            "type": "number"
          }
        },
        "required": [
          "value",
          "unit"
        ],
        "title": "DeviceOptionValue",
        "type": "object"
      },
      "EmbeddingDeleteResponse": {
        "description": "Response model for deleting a patch embedding.",
        "examples": [
          {
            "status": "deleted"
          }
        ],
        "properties": {
          "status": {
            "description": "Deletion status",
            "examples": [
              "deleted"
            ],
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "title": "EmbeddingDeleteResponse",
        "type": "object"
      },
      "EmbeddingQuery": {
        "description": "Request model for similarity search.",
        "properties": {
          "embedding": {
            "description": "Vector to compare",
            "items": {
              "type": "number"
            },
            "title": "Embedding",
            "type": "array"
          },
          "top_k": {
            "default": 5,
            "description": "Number of matches to return",
            "title": "Top K",
            "type": "integer"
          }
        },
        "required": [
          "embedding"
        ],
        "title": "EmbeddingQuery",
        "type": "object"
      },
      "ErrorDetail": {
        "properties": {
          "loc": {
            "default": [],
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Loc",
            "type": "array"
          },
          "msg": {
            "title": "Msg",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "msg",
          "type"
        ],
        "title": "ErrorDetail",
        "type": "object"
      },
      "ErrorResponse": {
        "properties": {
          "detail": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/ErrorDetail"
                },
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "title": "Detail"
          },
          "request_id": {
            "format": "uuid",
            "title": "Request Id",
            "type": "string"
          }
        },
        "required": [
          "detail"
        ],
        "title": "ErrorResponse",
        "type": "object"
      },
      "Haptic": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Description of the haptic configuration",
            "title": "Description"
          },
          "device": {
            "$ref": "#/components/schemas/DeviceConfig",
            "description": "Device configuration"
          },
          "haptic_id": {
            "title": "Haptic Id",
            "type": "integer"
          },
          "input_parameters": {
            "description": "List of input parameters",
            "items": {
              "$ref": "#/components/schemas/HapticParameter"
            },
            "title": "Input Parameters",
            "type": "array"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Metadata about the haptic configuration",
            "examples": [
              {
                "category": "haptic",
                "complexity": "medium",
                "tags": [
                  "vibration",
                  "feedback"
                ]
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "description": "Name of the haptic configuration",
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name",
          "device",
          "input_parameters",
          "haptic_id"
        ],
        "title": "Haptic",
        "type": "object"
      },
      "HapticCreate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Description of the haptic configuration",
            "title": "Description"
          },
          "device": {
            "$ref": "#/components/schemas/DeviceConfig",
            "description": "Device configuration"
          },
          "input_parameters": {
            "description": "List of input parameters",
            "items": {
              "$ref": "#/components/schemas/HapticParameter"
            },
            "title": "Input Parameters",
            "type": "array"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Metadata about the haptic configuration",
            "examples": [
              {
                "category": "haptic",
                "complexity": "medium",
                "tags": [
                  "vibration",
                  "feedback"
                ]
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "description": "Name of the haptic configuration",
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name",
          "device",
          "input_parameters"
        ],
        "title": "HapticCreate",
        "type": "object"
      },
      "HapticParameter": {
        "properties": {
          "default": {
            "description": "Default value",
            "title": "Default"
          },
          "max": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Maximum allowed value",
            "title": "Max"
          },
          "min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Minimum allowed value",
            "title": "Min"
          },
          "name": {
            "description": "Name of the parameter",
            "title": "Name",
            "type": "string"
          },
          "options": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Available options for enum types",
            "title": "Options"
          },
          "parameter": {
            "description": "The parameter",
            "title": "Parameter",
            "type": "string"
          },
          "path": {
            "description": "Path to the parameter",
            "title": "Path",
            "type": "string"
          },
          "smoothingTime": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Smoothing time in seconds",
            "title": "Smoothingtime"
          },
          "step": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Step increment value",
            "title": "Step"
          },
          "type": {
            "description": "Data type of the parameter",
            "title": "Type",
            "type": "string"
          },
          "unit": {
            "description": "Unit of measurement",
            "title": "Unit",
            "type": "string"
          }
        },
        "required": [
          "name",
          "parameter",
          "path",
          "type",
          "unit",
          "default"
        ],
        "title": "HapticParameter",
        "type": "object"
      },
      "HapticUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "device": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DeviceConfig"
              },
              {
                "type": "null"
              }
            ]
          },
          "input_parameters": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/HapticParameter"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Parameters"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "title": "HapticUpdate",
        "type": "object"
      },
      "Helper-Input": {
        "properties": {
          "glsl": {
            "title": "Glsl",
            "type": "string"
          },
          "requires": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HelperRequires"
              },
              {
                "type": "null"
              }
            ]
          },
          "stage": {
            "default": "any",
            "enum": [
              "fragment",
              "vertex",
              "any"
            ],
            "title": "Stage",
            "type": "string"
          }
        },
        "required": [
          "glsl"
        ],
        "title": "Helper",
        "type": "object"
      },
      "Helper-Output": {
        "properties": {
          "glsl": {
            "title": "Glsl",
            "type": "string"
          },
          "requires": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HelperRequires"
              },
              {
                "type": "null"
              }
            ]
          },
          "stage": {
            "default": "any",
            "enum": [
              "fragment",
              "vertex",
              "any"
            ],
            "title": "Stage",
            "type": "string"
          }
        },
        "required": [
          "glsl"
        ],
        "title": "Helper",
        "type": "object"
      },
      "HelperRequires": {
        "properties": {
          "inputParametersSpec": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/InputParam"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Inputparametersspec"
          },
          "uniforms": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uniforms"
          }
        },
        "title": "HelperRequires",
        "type": "object"
      },
      "InputParam": {
        "properties": {
          "default": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "Default"
          },
          "max": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max"
          },
          "min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "parameter": {
            "title": "Parameter",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "smoothingTime": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Smoothingtime"
          },
          "step": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Step"
          },
          "type": {
            "enum": [
              "float",
              "int",
              "bool"
            ],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "name",
          "parameter",
          "path",
          "type",
          "default"
        ],
        "title": "InputParam",
        "type": "object"
      },
      "InputParameter": {
        "properties": {
          "default": {
            "title": "Default",
            "type": "number"
          },
          "max": {
            "title": "Max",
            "type": "number"
          },
          "min": {
            "title": "Min",
            "type": "number"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "parameter": {
            "title": "Parameter",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "smoothingTime": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Smoothingtime"
          },
          "step": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Step"
          },
          "type": {
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "name",
          "parameter",
          "path",
          "type",
          "default",
          "min",
          "max"
        ],
        "title": "InputParameter",
        "type": "object"
      },
      "Mapping-Input": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ActionType"
          },
          "combo": {
            "$ref": "#/components/schemas/ComboType"
          }
        },
        "required": [
          "combo",
          "action"
        ],
        "title": "Mapping",
        "type": "object"
      },
      "Mapping-Output": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ActionType"
          },
          "combo": {
            "$ref": "#/components/schemas/ComboType"
          }
        },
        "required": [
          "combo",
          "action"
        ],
        "title": "Mapping",
        "type": "object"
      },
      "Modulation": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Description of the modulation set",
            "title": "Description"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Metadata about the modulation set",
            "examples": [
              {
                "category": "modulation",
                "complexity": "medium",
                "tags": [
                  "multimodal",
                  "dynamic"
                ]
              }
            ],
            "title": "Meta Info"
          },
          "modulation_id": {
            "title": "Modulation Id",
            "type": "integer"
          },
          "modulations": {
            "description": "List of modulations",
            "examples": [
              {
                "amplitude": 0.5,
                "frequency": 0.5,
                "id": "wave_speed_pulse",
                "max": 1.0,
                "min": 0.0,
                "offset": 1.0,
                "phase": 0.0,
                "scale": 1.0,
                "scaleProfile": "linear",
                "target": "visual.u_wave_speed",
                "type": "additive",
                "waveform": "triangle"
              },
              {
                "amplitude": 400,
                "frequency": 0.25,
                "id": "filter_sweep",
                "max": 1.0,
                "min": 0.0,
                "offset": 800,
                "phase": 0.0,
                "scale": 1.0,
                "scaleProfile": "exponential",
                "target": "tone.filter.frequency",
                "type": "additive",
                "waveform": "triangle"
              },
              {
                "amplitude": 0.2,
                "frequency": 1.0,
                "id": "haptic_pulse",
                "max": 1.0,
                "min": 0.0,
                "offset": 0.6,
                "phase": 0.0,
                "scale": 1.0,
                "scaleProfile": "linear",
                "target": "haptic.intensity",
                "type": "additive",
                "waveform": "sine"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ModulationItem"
            },
            "title": "Modulations",
            "type": "array"
          },
          "name": {
            "description": "Name of the modulation set",
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name",
          "modulations",
          "modulation_id"
        ],
        "title": "Modulation",
        "type": "object"
      },
      "ModulationCreate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Description of the modulation set",
            "title": "Description"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Metadata about the modulation set",
            "examples": [
              {
                "category": "modulation",
                "complexity": "medium",
                "tags": [
                  "multimodal",
                  "dynamic"
                ]
              }
            ],
            "title": "Meta Info"
          },
          "modulations": {
            "description": "List of modulations",
            "examples": [
              {
                "amplitude": 0.5,
                "frequency": 0.5,
                "id": "wave_speed_pulse",
                "max": 1.0,
                "min": 0.0,
                "offset": 1.0,
                "phase": 0.0,
                "scale": 1.0,
                "scaleProfile": "linear",
                "target": "visual.u_wave_speed",
                "type": "additive",
                "waveform": "triangle"
              },
              {
                "amplitude": 400,
                "frequency": 0.25,
                "id": "filter_sweep",
                "max": 1.0,
                "min": 0.0,
                "offset": 800,
                "phase": 0.0,
                "scale": 1.0,
                "scaleProfile": "exponential",
                "target": "tone.filter.frequency",
                "type": "additive",
                "waveform": "triangle"
              },
              {
                "amplitude": 0.2,
                "frequency": 1.0,
                "id": "haptic_pulse",
                "max": 1.0,
                "min": 0.0,
                "offset": 0.6,
                "phase": 0.0,
                "scale": 1.0,
                "scaleProfile": "linear",
                "target": "haptic.intensity",
                "type": "additive",
                "waveform": "sine"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ModulationItem"
            },
            "title": "Modulations",
            "type": "array"
          },
          "name": {
            "description": "Name of the modulation set",
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name",
          "modulations"
        ],
        "title": "ModulationCreate",
        "type": "object"
      },
      "ModulationItem": {
        "properties": {
          "amplitude": {
            "description": "Amplitude of the modulation",
            "title": "Amplitude",
            "type": "number"
          },
          "frequency": {
            "description": "Frequency of the modulation in Hz",
            "title": "Frequency",
            "type": "number"
          },
          "id": {
            "description": "Unique identifier for the modulation",
            "title": "Id",
            "type": "string"
          },
          "max": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Maximum allowable value for the modulation",
            "title": "Max"
          },
          "min": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "description": "Minimum allowable value for the modulation",
            "title": "Min"
          },
          "offset": {
            "description": "Offset/base value of the modulation",
            "title": "Offset",
            "type": "number"
          },
          "phase": {
            "description": "Phase offset in radians",
            "title": "Phase",
            "type": "number"
          },
          "scale": {
            "default": 1.0,
            "description": "Scaling factor applied to the modulation output",
            "title": "Scale",
            "type": "number"
          },
          "scaleProfile": {
            "default": "linear",
            "description": "Response profile to shape the modulation output",
            "enum": [
              "linear",
              "exponential",
              "logarithmic",
              "sine",
              "cosine"
            ],
            "title": "Scaleprofile",
            "type": "string"
          },
          "target": {
            "description": "Target parameter path (e.g., 'visual.u_wave_speed', 'tone.filter.frequency')",
            "title": "Target",
            "type": "string"
          },
          "type": {
            "description": "Type of modulation",
            "enum": [
              "additive",
              "multiplicative"
            ],
            "title": "Type",
            "type": "string"
          },
          "waveform": {
            "description": "Waveform type",
            "enum": [
              "sine",
              "triangle",
              "square",
              "sawtooth"
            ],
            "title": "Waveform",
            "type": "string"
          }
        },
        "required": [
          "id",
          "target",
          "type",
          "waveform",
          "frequency",
          "amplitude",
          "offset",
          "phase"
        ],
        "title": "ModulationItem",
        "type": "object"
      },
      "ModulationUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "modulations": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ModulationItem"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modulations"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "title": "ModulationUpdate",
        "type": "object"
      },
      "NestedControlResponse": {
        "properties": {
          "control_parameters": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Control Parameters"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "title": "NestedControlResponse",
        "type": "object"
      },
      "NestedHapticResponse": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "device": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Device"
          },
          "input_parameters": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Parameters"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "title": "NestedHapticResponse",
        "type": "object"
      },
      "NestedShaderResponse": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "fragment_shader": {
            "title": "Fragment Shader",
            "type": "string"
          },
          "input_parameters": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Parameters"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "shader_lib_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shader Lib Id"
          },
          "uniforms": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": [],
            "title": "Uniforms"
          },
          "vertex_shader": {
            "title": "Vertex Shader",
            "type": "string"
          }
        },
        "required": [
          "name",
          "vertex_shader",
          "fragment_shader"
        ],
        "title": "NestedShaderResponse",
        "type": "object"
      },
      "NestedSynestheticAsset": {
        "properties": {
          "control": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NestedControlResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "control_parameters": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Control Parameters"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "haptic": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NestedHapticResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "modulation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Modulation"
              },
              {
                "type": "null"
              }
            ]
          },
          "modulations": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modulations"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "rule_bundle": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuleBundleSchema-Output"
              },
              {
                "type": "null"
              }
            ]
          },
          "shader": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NestedShaderResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "synesthetic_asset_id": {
            "title": "Synesthetic Asset Id",
            "type": "integer"
          },
          "tone": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NestedToneResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "synesthetic_asset_id",
          "name",
          "created_at",
          "updated_at"
        ],
        "title": "NestedSynestheticAsset",
        "type": "object"
      },
      "NestedSynestheticAssetCreate": {
        "properties": {
          "control": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ControlCreate"
              },
              {
                "type": "null"
              }
            ]
          },
          "control_parameters": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Array of control mappings for this asset",
            "examples": [
              {
                "default": 0.0,
                "label": "Wave X",
                "mappings": [
                  {
                    "action": {
                      "axis": "mouse.x",
                      "curve": "linear",
                      "scale": 1.0,
                      "sensitivity": 0.002
                    },
                    "combo": {
                      "mouseButtons": [
                        "left"
                      ],
                      "strict": true
                    }
                  }
                ],
                "max": 1.0,
                "min": -1.0,
                "parameter": "visual.u_wave_x",
                "smoothingTime": 0.1,
                "step": 0.01,
                "type": "float",
                "unit": "linear"
              }
            ],
            "title": "Control Parameters"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Description of the asset's purpose",
            "title": "Description"
          },
          "haptic": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HapticCreate"
              },
              {
                "type": "null"
              }
            ]
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Metadata about the asset",
            "title": "Meta Info"
          },
          "modulation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModulationCreate"
              },
              {
                "type": "null"
              }
            ]
          },
          "modulations": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Array of modulations for this asset",
            "examples": [
              {
                "amplitude": 0.5,
                "frequency": 0.5,
                "id": "wave_speed_pulse",
                "max": 1.0,
                "min": 0.0,
                "offset": 1.0,
                "phase": 0.0,
                "target": "visual.u_wave_speed",
                "type": "additive",
                "waveform": "triangle"
              },
              {
                "amplitude": 400,
                "frequency": 0.25,
                "id": "filter_sweep",
                "max": 1.0,
                "min": 0.0,
                "offset": 800,
                "phase": 0.0,
                "target": "tone.filter.frequency",
                "type": "additive",
                "waveform": "triangle"
              },
              {
                "amplitude": 0.2,
                "frequency": 1.0,
                "id": "haptic_pulse",
                "max": 1.0,
                "min": 0.0,
                "offset": 0.6,
                "phase": 0.0,
                "target": "haptic.intensity",
                "type": "additive",
                "waveform": "sine"
              }
            ],
            "title": "Modulations"
          },
          "name": {
            "description": "Name of the synesthetic asset",
            "examples": [
              "Circle Pulsar"
            ],
            "title": "Name",
            "type": "string"
          },
          "shader": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ShaderCreate"
              },
              {
                "type": "null"
              }
            ]
          },
          "tone": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ToneCreate"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "name"
        ],
        "title": "NestedSynestheticAssetCreate",
        "type": "object"
      },
      "NestedSynestheticAssetResponse": {
        "description": "Clean response schema for nested synesthetic assets, with properly nested components.\nWhen a nested component is included, its ID is omitted to avoid duplication.",
        "properties": {
          "control": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NestedControlResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "control_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Control Id"
          },
          "control_parameters": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Control Parameters"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "haptic": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NestedHapticResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "haptic_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Haptic Id"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "modulations": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modulations"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "rule_bundle": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuleBundleSchema-Output"
              },
              {
                "type": "null"
              }
            ]
          },
          "rule_bundle_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Bundle Id"
          },
          "shader": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NestedShaderResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "shader_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shader Id"
          },
          "synesthetic_asset_id": {
            "title": "Synesthetic Asset Id",
            "type": "integer"
          },
          "tone": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NestedToneResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "tone_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tone Id"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "synesthetic_asset_id",
          "name",
          "created_at",
          "updated_at"
        ],
        "title": "NestedSynestheticAssetResponse",
        "type": "object"
      },
      "NestedToneResponse": {
        "additionalProperties": true,
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "effects": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Effects"
          },
          "input_parameters": {
            "items": {
              "type": "object"
            },
            "title": "Input Parameters",
            "type": "array"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "parts": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parts"
          },
          "patterns": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Patterns"
          },
          "synth": {
            "title": "Synth",
            "type": "object"
          }
        },
        "required": [
          "name",
          "synth"
        ],
        "title": "NestedToneResponse",
        "type": "object"
      },
      "PatchEmbedding": {
        "description": "Patch embedding returned from the API.",
        "properties": {
          "embedding": {
            "description": "Vector embedding values",
            "items": {
              "type": "number"
            },
            "title": "Embedding",
            "type": "array"
          },
          "patch_id": {
            "description": "Associated patch ID",
            "title": "Patch Id",
            "type": "string"
          }
        },
        "required": [
          "patch_id",
          "embedding"
        ],
        "title": "PatchEmbedding",
        "type": "object"
      },
      "PatchEmbeddingCreate": {
        "description": "Request body for creating or updating an embedding.",
        "properties": {
          "embedding": {
            "description": "Vector embedding values",
            "items": {
              "type": "number"
            },
            "title": "Embedding",
            "type": "array"
          },
          "patch_id": {
            "description": "Associated patch ID",
            "title": "Patch Id",
            "type": "string"
          }
        },
        "required": [
          "patch_id",
          "embedding"
        ],
        "title": "PatchEmbeddingCreate",
        "type": "object"
      },
      "PatchPreviewMetadata": {
        "properties": {
          "applied": {
            "title": "Applied",
            "type": "boolean"
          },
          "base_version": {
            "title": "Base Version",
            "type": "integer"
          },
          "component_type": {
            "title": "Component Type",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "patch_id": {
            "title": "Patch Id",
            "type": "string"
          }
        },
        "required": [
          "patch_id",
          "component_type",
          "base_version",
          "applied",
          "created_at"
        ],
        "title": "PatchPreviewMetadata",
        "type": "object"
      },
      "PatchRating": {
        "description": "Patch rating returned from the API.",
        "properties": {
          "comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional feedback",
            "title": "Comment"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "patch_id": {
            "description": "Identifier of the rated patch",
            "title": "Patch Id",
            "type": "string"
          },
          "patch_rating_id": {
            "title": "Patch Rating Id",
            "type": "integer"
          },
          "rating": {
            "description": "Rating score from 1 to 5",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Rating",
            "type": "integer"
          }
        },
        "required": [
          "patch_id",
          "rating",
          "patch_rating_id",
          "created_at"
        ],
        "title": "PatchRating",
        "type": "object"
      },
      "PatchRatingScore": {
        "description": "Minimal payload for rating a patch.",
        "example": {
          "patch_id": "abc123",
          "rating": 5
        },
        "properties": {
          "patch_id": {
            "description": "Identifier of the rated patch",
            "title": "Patch Id",
            "type": "string"
          },
          "rating": {
            "description": "Rating score from 1 to 5",
            "maximum": 5.0,
            "minimum": 1.0,
            "title": "Rating",
            "type": "integer"
          }
        },
        "required": [
          "patch_id",
          "rating"
        ],
        "title": "PatchRatingScore",
        "type": "object"
      },
      "PingResponse": {
        "description": "Response model for ping endpoint.",
        "example": {
          "status": "MCP asset router live"
        },
        "properties": {
          "status": {
            "description": "Router status message",
            "examples": [
              "MCP asset router live"
            ],
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "title": "PingResponse",
        "type": "object"
      },
      "PreviewNestedAssetResponse": {
        "properties": {
          "control": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NestedControlResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "control_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Control Id"
          },
          "control_parameters": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Control Parameters"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "haptic": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NestedHapticResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "haptic_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Haptic Id"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "modulations": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modulations"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "preview": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PatchPreviewMetadata"
              },
              {
                "type": "null"
              }
            ]
          },
          "rule_bundle": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuleBundleSchema-Output"
              },
              {
                "type": "null"
              }
            ]
          },
          "rule_bundle_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Bundle Id"
          },
          "shader": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NestedShaderResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "shader_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shader Id"
          },
          "synesthetic_asset_id": {
            "title": "Synesthetic Asset Id",
            "type": "integer"
          },
          "tone": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NestedToneResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "tone_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tone Id"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "synesthetic_asset_id",
          "name",
          "created_at",
          "updated_at"
        ],
        "title": "PreviewNestedAssetResponse",
        "type": "object"
      },
      "RuleBundleSchema-Input": {
        "additionalProperties": false,
        "description": "Full rule bundle payload.",
        "example": {
          "description": "A rule that maps interactions on a virtual grid to multimodal outputs by defining channels that link grid pressure to parameter changes.",
          "meta_info": {
            "category": "rule_bundle",
            "complexity": "high",
            "tags": [
              "grid",
              "interaction",
              "multimodal",
              "mapping",
              "client-side"
            ]
          },
          "name": "SDF Grid Rules",
          "rules": [
            {
              "effects": [
                {
                  "channel": "audioTrigger",
                  "op": "triggerAttackRelease",
                  "target": "tone.synth",
                  "value": {
                    "duration": "8n",
                    "note": "<grid.note>",
                    "velocity": {
                      "curve": "linear",
                      "scale": 1.0,
                      "source": "grid.pressure",
                      "threshold": 0.02
                    }
                  }
                }
              ],
              "execution": "client",
              "id": "grid_to_multimodal_mapping",
              "trigger": {
                "params": {
                  "cooldown": 100,
                  "gridSize": 8
                },
                "type": "grid_cell"
              }
            }
          ]
        },
        "properties": {
          "created_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Creation time",
            "title": "Created At"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Bundle details",
            "title": "Description"
          },
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Database ID",
            "title": "Id"
          },
          "meta_info": {
            "description": "Metadata about the rule bundle",
            "title": "Meta Info",
            "type": "object"
          },
          "name": {
            "description": "Human readable bundle name",
            "title": "Name",
            "type": "string"
          },
          "rules": {
            "description": "List of rules",
            "items": {
              "$ref": "#/components/schemas/RuleSchema-Input"
            },
            "title": "Rules",
            "type": "array"
          },
          "updated_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Last update time",
            "title": "Updated At"
          }
        },
        "required": [
          "name",
          "rules"
        ],
        "title": "RuleBundleSchema",
        "type": "object"
      },
      "RuleBundleSchema-Output": {
        "additionalProperties": false,
        "description": "Full rule bundle payload.",
        "example": {
          "description": "A rule that maps interactions on a virtual grid to multimodal outputs by defining channels that link grid pressure to parameter changes.",
          "meta_info": {
            "category": "rule_bundle",
            "complexity": "high",
            "tags": [
              "grid",
              "interaction",
              "multimodal",
              "mapping",
              "client-side"
            ]
          },
          "name": "SDF Grid Rules",
          "rules": [
            {
              "effects": [
                {
                  "channel": "audioTrigger",
                  "op": "triggerAttackRelease",
                  "target": "tone.synth",
                  "value": {
                    "duration": "8n",
                    "note": "<grid.note>",
                    "velocity": {
                      "curve": "linear",
                      "scale": 1.0,
                      "source": "grid.pressure",
                      "threshold": 0.02
                    }
                  }
                }
              ],
              "execution": "client",
              "id": "grid_to_multimodal_mapping",
              "trigger": {
                "params": {
                  "cooldown": 100,
                  "gridSize": 8
                },
                "type": "grid_cell"
              }
            }
          ]
        },
        "properties": {
          "created_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Creation time",
            "title": "Created At"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Bundle details",
            "title": "Description"
          },
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Database ID",
            "title": "Id"
          },
          "meta_info": {
            "description": "Metadata about the rule bundle",
            "title": "Meta Info",
            "type": "object"
          },
          "name": {
            "description": "Human readable bundle name",
            "title": "Name",
            "type": "string"
          },
          "rules": {
            "description": "List of rules",
            "items": {
              "$ref": "#/components/schemas/RuleSchema-Output"
            },
            "title": "Rules",
            "type": "array"
          },
          "updated_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Last update time",
            "title": "Updated At"
          }
        },
        "required": [
          "name",
          "rules"
        ],
        "title": "RuleBundleSchema",
        "type": "object"
      },
      "RuleSchema-Input": {
        "additionalProperties": false,
        "description": "Representation of a single rule within a bundle.",
        "properties": {
          "effects": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Effects applied when the rule is triggered",
            "title": "Effects"
          },
          "execution": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Execution environment for the rule",
            "title": "Execution"
          },
          "expr": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "contentMediaType": "application/json",
                "contentSchema": {
                  "type": "object"
                },
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Expression defining the rule logic",
            "title": "Expr"
          },
          "id": {
            "description": "Unique rule identifier",
            "title": "Id",
            "type": "string"
          },
          "target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Parameter path the rule targets",
            "title": "Target"
          },
          "trigger": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Trigger configuration for the rule",
            "title": "Trigger"
          }
        },
        "required": [
          "id"
        ],
        "title": "RuleSchema",
        "type": "object"
      },
      "RuleSchema-Output": {
        "additionalProperties": false,
        "description": "Representation of a single rule within a bundle.",
        "properties": {
          "effects": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Effects applied when the rule is triggered",
            "title": "Effects"
          },
          "execution": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Execution environment for the rule",
            "title": "Execution"
          },
          "expr": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Expression defining the rule logic",
            "title": "Expr"
          },
          "id": {
            "description": "Unique rule identifier",
            "title": "Id",
            "type": "string"
          },
          "target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Parameter path the rule targets",
            "title": "Target"
          },
          "trigger": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Trigger configuration for the rule",
            "title": "Trigger"
          }
        },
        "required": [
          "id"
        ],
        "title": "RuleSchema",
        "type": "object"
      },
      "Shader": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "fragment_shader": {
            "description": "GLSL fragment shader code",
            "examples": [
              "// fragment shader example"
            ],
            "title": "Fragment Shader",
            "type": "string"
          },
          "input_parameters": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/InputParameter"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Parameters"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Metadata about the shader",
            "examples": [
              {
                "category": "visual",
                "complexity": "low",
                "tags": [
                  "circle",
                  "sdf"
                ]
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "description": "Name of the shader",
            "examples": [
              "Circle Shader"
            ],
            "title": "Name",
            "type": "string"
          },
          "shader_id": {
            "title": "Shader Id",
            "type": "integer"
          },
          "shader_lib_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shader Lib Id"
          },
          "uniforms": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UniformDef"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uniforms"
          },
          "vertex_shader": {
            "description": "GLSL vertex shader code",
            "examples": [
              "// vertex shader example"
            ],
            "title": "Vertex Shader",
            "type": "string"
          }
        },
        "required": [
          "name",
          "vertex_shader",
          "fragment_shader",
          "shader_id"
        ],
        "title": "Shader",
        "type": "object"
      },
      "ShaderCreate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "fragment_shader": {
            "description": "GLSL fragment shader code",
            "examples": [
              "// fragment shader example"
            ],
            "title": "Fragment Shader",
            "type": "string"
          },
          "input_parameters": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/InputParameter"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Parameters"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Metadata about the shader",
            "examples": [
              {
                "category": "visual",
                "complexity": "low",
                "tags": [
                  "circle",
                  "sdf"
                ]
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "description": "Name of the shader",
            "examples": [
              "Circle Shader"
            ],
            "title": "Name",
            "type": "string"
          },
          "shader_lib_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shader Lib Id"
          },
          "uniforms": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UniformDef"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uniforms"
          },
          "vertex_shader": {
            "description": "GLSL vertex shader code",
            "examples": [
              "// vertex shader example"
            ],
            "title": "Vertex Shader",
            "type": "string"
          }
        },
        "required": [
          "name",
          "vertex_shader",
          "fragment_shader"
        ],
        "title": "ShaderCreate",
        "type": "object"
      },
      "ShaderLib": {
        "examples": [
          {
            "baseInputParametersSpec": [
              {
                "default": 0.0,
                "max": 1.0,
                "min": -1.0,
                "name": "positionX",
                "parameter": "u_px",
                "path": "u_px",
                "smoothingTime": 0.05,
                "step": 0.01,
                "type": "float"
              },
              {
                "default": 0.0,
                "max": 1.0,
                "min": -1.0,
                "name": "positionY",
                "parameter": "u_py",
                "path": "u_py",
                "smoothingTime": 0.05,
                "step": 0.01,
                "type": "float"
              }
            ],
            "helpers": {
              "sdHexagon": {
                "glsl": "float sdHexagon(vec2 p){return 0.;}",
                "requires": {
                  "inputParametersSpec": [
                    {
                      "default": 0.5,
                      "max": 2.0,
                      "min": 0.1,
                      "name": "radius",
                      "parameter": "u_r",
                      "path": "u_r",
                      "smoothingTime": 0.05,
                      "step": 0.01,
                      "type": "float"
                    }
                  ],
                  "uniforms": [
                    "u_r"
                  ]
                },
                "stage": "fragment"
              }
            },
            "name": "ExampleLib",
            "reservedUniforms": [
              "u_time",
              "u_resolution",
              "u_backgroundColor",
              "u_gridSize",
              "u_gridColor",
              "u_px",
              "u_py"
            ],
            "version": "1"
          }
        ],
        "properties": {
          "baseInputParametersSpec": {
            "items": {
              "$ref": "#/components/schemas/InputParam"
            },
            "title": "Baseinputparametersspec",
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "helpers": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Helper-Output"
            },
            "title": "Helpers",
            "type": "object"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "reservedUniforms": {
            "items": {
              "type": "string"
            },
            "title": "Reserveduniforms",
            "type": "array"
          },
          "shaderlib_id": {
            "title": "Shaderlib Id",
            "type": "integer"
          },
          "templates": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Templates"
              },
              {
                "type": "null"
              }
            ]
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "required": [
          "name",
          "baseInputParametersSpec",
          "helpers",
          "shaderlib_id",
          "created_at",
          "updated_at"
        ],
        "title": "ShaderLib",
        "type": "object"
      },
      "ShaderLibCreate": {
        "examples": [
          {
            "baseInputParametersSpec": [
              {
                "default": 0.0,
                "max": 1.0,
                "min": -1.0,
                "name": "positionX",
                "parameter": "u_px",
                "path": "u_px",
                "smoothingTime": 0.05,
                "step": 0.01,
                "type": "float"
              },
              {
                "default": 0.0,
                "max": 1.0,
                "min": -1.0,
                "name": "positionY",
                "parameter": "u_py",
                "path": "u_py",
                "smoothingTime": 0.05,
                "step": 0.01,
                "type": "float"
              }
            ],
            "helpers": {
              "sdHexagon": {
                "glsl": "float sdHexagon(vec2 p){return 0.;}",
                "requires": {
                  "inputParametersSpec": [
                    {
                      "default": 0.5,
                      "max": 2.0,
                      "min": 0.1,
                      "name": "radius",
                      "parameter": "u_r",
                      "path": "u_r",
                      "smoothingTime": 0.05,
                      "step": 0.01,
                      "type": "float"
                    }
                  ],
                  "uniforms": [
                    "u_r"
                  ]
                },
                "stage": "fragment"
              }
            },
            "name": "ExampleLib",
            "reservedUniforms": [
              "u_time",
              "u_resolution",
              "u_backgroundColor",
              "u_gridSize",
              "u_gridColor",
              "u_px",
              "u_py"
            ],
            "version": "1"
          }
        ],
        "properties": {
          "baseInputParametersSpec": {
            "items": {
              "$ref": "#/components/schemas/InputParam"
            },
            "title": "Baseinputparametersspec",
            "type": "array"
          },
          "helpers": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Helper-Input"
            },
            "title": "Helpers",
            "type": "object"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "reservedUniforms": {
            "items": {
              "type": "string"
            },
            "title": "Reserveduniforms",
            "type": "array"
          },
          "templates": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Templates"
              },
              {
                "type": "null"
              }
            ]
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "required": [
          "name",
          "baseInputParametersSpec",
          "helpers"
        ],
        "title": "ShaderLibCreate",
        "type": "object"
      },
      "ShaderUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "fragment_shader": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fragment Shader"
          },
          "input_parameters": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/InputParameter"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Parameters"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "shader_lib_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shader Lib Id"
          },
          "uniforms": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UniformDef"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uniforms"
          },
          "vertex_shader": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vertex Shader"
          }
        },
        "title": "ShaderUpdate",
        "type": "object"
      },
      "SynestheticAssetCreate": {
        "properties": {
          "control_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Control Id"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Description of the asset's purpose",
            "examples": [
              "A circle that pulses and changes color and sound frequency based on user controls"
            ],
            "title": "Description"
          },
          "haptic_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Haptic Id"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Metadata about the asset",
            "examples": [
              {
                "category": "visual",
                "complexity": "medium",
                "tags": [
                  "geometric",
                  "reactive",
                  "audio"
                ]
              }
            ],
            "title": "Meta Info"
          },
          "modulation_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modulation Id"
          },
          "modulations": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Array of modulations for this asset",
            "examples": [
              {
                "amplitude": 0.5,
                "frequency": 0.5,
                "id": "wave_speed_pulse",
                "max": 1.0,
                "min": 0.0,
                "offset": 1.0,
                "phase": 0.0,
                "scale": 1.0,
                "scaleProfile": "linear",
                "target": "visual.u_wave_speed",
                "type": "additive",
                "waveform": "triangle"
              }
            ],
            "title": "Modulations"
          },
          "name": {
            "description": "Name of the synesthetic asset",
            "examples": [
              "Circle Pulsar"
            ],
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "rule_bundle_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Bundle Id"
          },
          "shader_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shader Id"
          },
          "tone_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tone Id"
          }
        },
        "required": [
          "name"
        ],
        "title": "SynestheticAssetCreate",
        "type": "object"
      },
      "SynestheticAssetResponse": {
        "description": "Clean response schema for synesthetic assets, without all the nullable fields\nthat might not be present in the response.",
        "properties": {
          "control_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Control Id"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "haptic_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Haptic Id"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "modulations": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modulations"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "shader_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shader Id"
          },
          "synesthetic_asset_id": {
            "title": "Synesthetic Asset Id",
            "type": "integer"
          },
          "tone_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tone Id"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "synesthetic_asset_id",
          "name",
          "created_at",
          "updated_at"
        ],
        "title": "SynestheticAssetResponse",
        "type": "object"
      },
      "SynestheticAssetUpdate": {
        "properties": {
          "control_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Control Id"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "haptic_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Haptic Id"
          },
          "meta_info": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "modulation_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modulation Id"
          },
          "modulations": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modulations"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "shader_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shader Id"
          },
          "tone_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tone Id"
          }
        },
        "title": "SynestheticAssetUpdate",
        "type": "object"
      },
      "SynthType": {
        "description": "Allowed Tone.js synth types.",
        "enum": [
          "Tone.Synth",
          "Tone.PolySynth",
          "Tone.MonoSynth",
          "Tone.FMSynth",
          "Tone.AMSynth",
          "Tone.DuoSynth",
          "Tone.MembraneSynth",
          "Tone.MetalSynth",
          "Tone.PluckSynth"
        ],
        "title": "SynthType",
        "type": "string"
      },
      "Templates": {
        "properties": {
          "fragment_shader": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fragment Shader"
          },
          "input_parameters": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/InputParam"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Parameters"
          }
        },
        "title": "Templates",
        "type": "object"
      },
      "Tone": {
        "additionalProperties": true,
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Description of the tone",
            "title": "Description"
          },
          "effects": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ToneEffect"
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Effects configuration",
            "title": "Effects"
          },
          "input_parameters": {
            "description": "Tone input parameters",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ToneParameter"
                },
                {
                  "type": "object"
                }
              ]
            },
            "title": "Input Parameters",
            "type": "array"
          },
          "meta_info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ToneMetaInfo"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional metadata about the tone",
            "title": "Meta Info"
          },
          "name": {
            "description": "Name of the tone",
            "title": "Name",
            "type": "string"
          },
          "parts": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TonePart"
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Parts configuration",
            "title": "Parts"
          },
          "patterns": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TonePattern"
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Patterns configuration",
            "title": "Patterns"
          },
          "synth": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ToneSynth"
              },
              {
                "type": "object"
              }
            ],
            "description": "Synth configuration",
            "title": "Synth"
          },
          "tone_id": {
            "title": "Tone Id",
            "type": "integer"
          }
        },
        "required": [
          "name",
          "synth",
          "tone_id"
        ],
        "title": "Tone",
        "type": "object"
      },
      "ToneCreate": {
        "additionalProperties": true,
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Description of the tone",
            "title": "Description"
          },
          "effects": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ToneEffect"
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Effects configuration",
            "title": "Effects"
          },
          "input_parameters": {
            "description": "Tone input parameters",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ToneParameter"
                },
                {
                  "type": "object"
                }
              ]
            },
            "title": "Input Parameters",
            "type": "array"
          },
          "meta_info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ToneMetaInfo"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional metadata about the tone",
            "title": "Meta Info"
          },
          "name": {
            "description": "Name of the tone",
            "title": "Name",
            "type": "string"
          },
          "parts": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TonePart"
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Parts configuration",
            "title": "Parts"
          },
          "patterns": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TonePattern"
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Patterns configuration",
            "title": "Patterns"
          },
          "synth": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ToneSynth"
              },
              {
                "type": "object"
              }
            ],
            "description": "Synth configuration",
            "title": "Synth"
          }
        },
        "required": [
          "name",
          "synth"
        ],
        "title": "ToneCreate",
        "type": "object"
      },
      "ToneEffect": {
        "additionalProperties": true,
        "properties": {
          "options": {
            "title": "Options",
            "type": "object"
          },
          "order": {
            "title": "Order",
            "type": "integer"
          },
          "type": {
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "type",
          "options",
          "order"
        ],
        "title": "ToneEffect",
        "type": "object"
      },
      "ToneMetaInfo": {
        "additionalProperties": true,
        "properties": {
          "category": {
            "title": "Category",
            "type": "string"
          },
          "complexity": {
            "title": "Complexity",
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "title": "Tags",
            "type": "array"
          }
        },
        "required": [
          "category",
          "tags",
          "complexity"
        ],
        "title": "ToneMetaInfo",
        "type": "object"
      },
      "ToneParameter": {
        "additionalProperties": true,
        "properties": {
          "default": {
            "title": "Default"
          },
          "max": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Max"
          },
          "min": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Min"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "options": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options"
          },
          "parameter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameter"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "smoothingTime": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Smoothingtime"
          },
          "type": {
            "title": "Type",
            "type": "string"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit"
          }
        },
        "required": [
          "name",
          "path",
          "type",
          "default"
        ],
        "title": "ToneParameter",
        "type": "object"
      },
      "TonePart": {
        "additionalProperties": true,
        "properties": {
          "duration": {
            "title": "Duration",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "loop": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Loop"
          },
          "pattern": {
            "title": "Pattern",
            "type": "string"
          },
          "start": {
            "title": "Start",
            "type": "string"
          }
        },
        "required": [
          "id",
          "pattern",
          "start",
          "duration"
        ],
        "title": "TonePart",
        "type": "object"
      },
      "TonePattern": {
        "additionalProperties": true,
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "options": {
            "title": "Options",
            "type": "object"
          },
          "type": {
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "options"
        ],
        "title": "TonePattern",
        "type": "object"
      },
      "ToneSynth": {
        "additionalProperties": true,
        "properties": {
          "options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ToneSynthOptions"
              },
              {
                "type": "object"
              }
            ],
            "title": "Options"
          },
          "type": {
            "$ref": "#/components/schemas/SynthType"
          }
        },
        "required": [
          "type",
          "options"
        ],
        "title": "ToneSynth",
        "type": "object"
      },
      "ToneSynthOptions": {
        "additionalProperties": true,
        "properties": {
          "envelope": {
            "title": "Envelope",
            "type": "object"
          },
          "filter": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filter"
          },
          "filterEnvelope": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filterenvelope"
          },
          "oscillator": {
            "title": "Oscillator",
            "type": "object"
          },
          "portamento": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Portamento"
          },
          "volume": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "object"
              }
            ],
            "title": "Volume"
          }
        },
        "required": [
          "oscillator",
          "envelope",
          "volume"
        ],
        "title": "ToneSynthOptions",
        "type": "object"
      },
      "ToneUpdate": {
        "additionalProperties": true,
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "effects": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ToneEffect"
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Effects"
          },
          "input_parameters": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ToneParameter"
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Input Parameters"
          },
          "meta_info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ToneMetaInfo"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta Info"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "parts": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TonePart"
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parts"
          },
          "patterns": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TonePattern"
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Patterns"
          },
          "synth": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ToneSynth"
              },
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Synth"
          }
        },
        "title": "ToneUpdate",
        "type": "object"
      },
      "UniformDef": {
        "properties": {
          "default": {
            "title": "Default"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "stage": {
            "title": "Stage",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "name",
          "type",
          "stage",
          "default"
        ],
        "title": "UniformDef",
        "type": "object"
      },
      "UpdateParamRequest": {
        "description": "Request model for updating a parameter value within an asset.",
        "example": {
          "asset_id": "asset_123",
          "path": "shader.u_time",
          "value": 1.5
        },
        "properties": {
          "asset_id": {
            "description": "Unique identifier of the asset to update",
            "examples": [
              "asset_123"
            ],
            "minLength": 1,
            "title": "Asset Id",
            "type": "string"
          },
          "path": {
            "description": "Dot-notation path to the parameter (e.g., 'shader.u_time', 'tone.volume')",
            "examples": [
              "shader.u_time"
            ],
            "minLength": 1,
            "title": "Path",
            "type": "string"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              }
            ],
            "description": "New value for the parameter",
            "examples": [
              1.5
            ],
            "title": "Value"
          }
        },
        "required": [
          "asset_id",
          "path",
          "value"
        ],
        "title": "UpdateParamRequest",
        "type": "object"
      },
      "UpdateParamResponse": {
        "description": "Response model for parameter updates.",
        "example": {
          "message": "Parameter updated successfully",
          "request_id": "req_def456ghi789",
          "result": {
            "asset_id": "asset_123",
            "new_value": 1.5,
            "old_value": 0.0,
            "path": "shader.u_time",
            "updated": true
          },
          "status": "success"
        },
        "properties": {
          "message": {
            "description": "Human-readable status message",
            "examples": [
              "Operation completed successfully"
            ],
            "title": "Message",
            "type": "string"
          },
          "request_id": {
            "description": "Unique request identifier for tracing",
            "examples": [
              "req_abc123def456"
            ],
            "title": "Request Id",
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/UpdateParamResult",
            "description": "Detailed update result"
          },
          "status": {
            "description": "Operation status",
            "examples": [
              "success"
            ],
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "request_id",
          "status",
          "message",
          "result"
        ],
        "title": "UpdateParamResponse",
        "type": "object"
      },
      "UpdateParamResult": {
        "description": "Result payload for parameter updates.",
        "example": {
          "asset_id": "asset_123",
          "new_value": 1.5,
          "old_value": 0.0,
          "path": "shader.u_time",
          "updated": true
        },
        "properties": {
          "asset_id": {
            "description": "Asset identifier that was updated",
            "examples": [
              "asset_123"
            ],
            "title": "Asset Id",
            "type": "string"
          },
          "new_value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              }
            ],
            "description": "New parameter value",
            "examples": [
              1.5
            ],
            "title": "New Value"
          },
          "old_value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              }
            ],
            "description": "Previous parameter value",
            "examples": [
              0.0
            ],
            "title": "Old Value"
          },
          "path": {
            "description": "Parameter path that was updated",
            "examples": [
              "shader.u_time"
            ],
            "title": "Path",
            "type": "string"
          },
          "updated": {
            "description": "Whether the update was successful",
            "examples": [
              true
            ],
            "title": "Updated",
            "type": "boolean"
          }
        },
        "required": [
          "asset_id",
          "path",
          "old_value",
          "new_value",
          "updated"
        ],
        "title": "UpdateParamResult",
        "type": "object"
      },
      "ValidateAssetRequest": {
        "description": "Request model for validating an asset configuration blob.",
        "example": {
          "asset_blob": {
            "name": "Test Asset",
            "shader": {
              "fragment_shader": "void main() { gl_FragColor = vec4(1.0); }",
              "uniforms": []
            },
            "tone": {
              "synth": {
                "type": "Tone.Synth"
              }
            }
          }
        },
        "properties": {
          "asset_blob": {
            "description": "Complete asset configuration to validate",
            "examples": [
              {
                "name": "Test Asset",
                "shader": {
                  "fragment_shader": "void main() { gl_FragColor = vec4(1.0); }",
                  "uniforms": []
                },
                "tone": {
                  "synth": {
                    "type": "Tone.Synth"
                  }
                }
              }
            ],
            "title": "Asset Blob",
            "type": "object"
          }
        },
        "required": [
          "asset_blob"
        ],
        "title": "ValidateAssetRequest",
        "type": "object"
      },
      "ValidateAssetResponse": {
        "description": "Response model for asset validation.",
        "example": {
          "message": "Asset validation passed",
          "request_id": "req_jkl012mno345",
          "result": {
            "components_found": [
              "name",
              "shader",
              "tone"
            ],
            "valid": true,
            "validation_passed": true
          },
          "status": "success"
        },
        "properties": {
          "message": {
            "description": "Human-readable status message",
            "examples": [
              "Operation completed successfully"
            ],
            "title": "Message",
            "type": "string"
          },
          "request_id": {
            "description": "Unique request identifier for tracing",
            "examples": [
              "req_abc123def456"
            ],
            "title": "Request Id",
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/ValidateAssetResult",
            "description": "Detailed validation result"
          },
          "status": {
            "description": "Operation status",
            "examples": [
              "success"
            ],
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "request_id",
          "status",
          "message",
          "result"
        ],
        "title": "ValidateAssetResponse",
        "type": "object"
      },
      "ValidateAssetResult": {
        "description": "Result payload for asset validation.",
        "example": {
          "components_found": [
            "name",
            "shader",
            "tone"
          ],
          "valid": true,
          "validation_passed": true
        },
        "properties": {
          "components_found": {
            "description": "List of components found in the asset blob",
            "examples": [
              [
                "name",
                "shader",
                "tone"
              ]
            ],
            "items": {
              "type": "string"
            },
            "title": "Components Found",
            "type": "array"
          },
          "valid": {
            "description": "Whether the asset configuration is valid",
            "examples": [
              true
            ],
            "title": "Valid",
            "type": "boolean"
          },
          "validation_passed": {
            "description": "Whether validation checks passed",
            "examples": [
              true
            ],
            "title": "Validation Passed",
            "type": "boolean"
          }
        },
        "required": [
          "valid",
          "components_found",
          "validation_passed"
        ],
        "title": "ValidateAssetResult",
        "type": "object"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "SDFK Backend API with canonical error responses",
    "title": "SDFK Backend API",
    "version": "0.1.1"
  },
  "openapi": "3.1.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "root__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Root"
      }
    },
    "/cache": {
      "get": {
        "description": "Return whether caching is enabled.",
        "operationId": "get_cache_status_cache_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheStatus"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Get Cache Status",
        "tags": [
          "admin"
        ]
      },
      "post": {
        "description": "Enable or disable caching at runtime.",
        "operationId": "set_cache_status_cache_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CacheStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CacheStatus"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Set Cache Status",
        "tags": [
          "admin"
        ]
      }
    },
    "/controls/": {
      "get": {
        "operationId": "read_items_controls__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ControlResponse"
                  },
                  "title": "Response Read Items Controls  Get",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Read Items",
        "tags": [
          "controls",
          "controls"
        ]
      },
      "post": {
        "operationId": "create_item_controls__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Create Item",
        "tags": [
          "controls",
          "controls"
        ]
      }
    },
    "/controls/{item_id}": {
      "delete": {
        "operationId": "delete_item_controls__item_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Delete Item",
        "tags": [
          "controls",
          "controls"
        ]
      },
      "get": {
        "operationId": "read_item_controls__item_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Read Item",
        "tags": [
          "controls",
          "controls"
        ]
      },
      "put": {
        "operationId": "update_item_controls__item_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Update Item",
        "tags": [
          "controls",
          "controls"
        ]
      }
    },
    "/embeddings/": {
      "post": {
        "operationId": "create_embedding_embeddings__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchEmbeddingCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchEmbedding"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Create Embedding",
        "tags": [
          "embeddings",
          "embeddings"
        ]
      }
    },
    "/embeddings/query": {
      "post": {
        "operationId": "query_embeddings_embeddings_query_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "title": "Response Query Embeddings Embeddings Query Post",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Query Embeddings",
        "tags": [
          "embeddings",
          "embeddings"
        ]
      }
    },
    "/embeddings/{patch_id}": {
      "delete": {
        "operationId": "delete_embedding_embeddings__patch_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "patch_id",
            "required": true,
            "schema": {
              "title": "Patch Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingDeleteResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Delete Embedding",
        "tags": [
          "embeddings",
          "embeddings"
        ]
      },
      "get": {
        "operationId": "read_embedding_embeddings__patch_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "patch_id",
            "required": true,
            "schema": {
              "title": "Patch Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchEmbedding"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Read Embedding",
        "tags": [
          "embeddings",
          "embeddings"
        ]
      },
      "put": {
        "operationId": "update_embedding_embeddings__patch_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "patch_id",
            "required": true,
            "schema": {
              "title": "Patch Id",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchEmbeddingCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchEmbedding"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Update Embedding",
        "tags": [
          "embeddings",
          "embeddings"
        ]
      }
    },
    "/haptics/": {
      "get": {
        "operationId": "read_items_haptics__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Haptic"
                  },
                  "title": "Response Read Items Haptics  Get",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Read Items",
        "tags": [
          "haptics"
        ]
      },
      "post": {
        "operationId": "create_item_haptics__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HapticCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Haptic"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Create Item",
        "tags": [
          "haptics"
        ]
      }
    },
    "/haptics/{item_id}": {
      "delete": {
        "operationId": "delete_item_haptics__item_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Haptic"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Delete Item",
        "tags": [
          "haptics"
        ]
      },
      "get": {
        "operationId": "read_item_haptics__item_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Haptic"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Read Item",
        "tags": [
          "haptics"
        ]
      },
      "put": {
        "operationId": "update_item_haptics__item_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HapticUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Haptic"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Update Item",
        "tags": [
          "haptics"
        ]
      }
    },
    "/health": {
      "get": {
        "description": "Check the health status of core services including database and MCP router.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "environment": {
                    "testing": true
                  },
                  "request_id": "550e8400-e29b-41d4-a716-446655440000",
                  "services": {
                    "database": {
                      "details": "Connected successfully",
                      "status": "healthy"
                    },
                    "mcp": {
                      "details": "MCP asset router available",
                      "status": "healthy"
                    }
                  },
                  "status": "healthy",
                  "timestamp": "2025-06-23T12:00:00Z"
                },
                "schema": {}
              }
            },
            "description": "All services are healthy"
          },
          "503": {
            "content": {
              "application/json": {
                "example": {
                  "environment": {
                    "testing": true
                  },
                  "request_id": "550e8400-e29b-41d4-a716-446655440000",
                  "services": {
                    "database": {
                      "details": "Connection failed: connection refused",
                      "status": "unhealthy"
                    },
                    "mcp": {
                      "details": "MCP router error",
                      "status": "unhealthy"
                    }
                  },
                  "status": "degraded",
                  "timestamp": "2025-06-23T12:00:00Z",
                  "unhealthy_services": [
                    "database"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "One or more services are unhealthy"
          }
        },
        "summary": "Comprehensive health check"
      }
    },
    "/mcp/asset/create": {
      "post": {
        "description": "Create a new multi-modal synesthetic asset with tone, shader, and optional haptic components.",
        "operationId": "create_asset_mcp_asset_create_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAssetResponse"
                }
              }
            },
            "description": "Asset created successfully"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid request data"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Create a new synesthetic asset",
        "tags": [
          "MCP Asset",
          "MCP Asset"
        ]
      }
    },
    "/mcp/asset/modulate": {
      "post": {
        "description": "Apply a modulation (LFO, envelope, etc.) to a specific asset parameter.",
        "operationId": "apply_modulation_mcp_asset_modulate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyModulationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplyModulationResponse"
                }
              }
            },
            "description": "Modulation applied successfully"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Asset not found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Modulation already exists"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid modulation definition"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Apply modulation to asset parameter",
        "tags": [
          "MCP Asset",
          "MCP Asset"
        ]
      }
    },
    "/mcp/asset/ping": {
      "get": {
        "description": "Verify that the MCP asset router is operational and responsive.",
        "operationId": "ping_asset_mcp_asset_ping_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Health check for MCP asset router",
        "tags": [
          "MCP Asset",
          "MCP Asset"
        ]
      }
    },
    "/mcp/asset/update": {
      "post": {
        "description": "Update a specific parameter value within an existing asset using dot notation path.",
        "operationId": "update_param_mcp_asset_update_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParamRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateParamResponse"
                }
              }
            },
            "description": "Parameter updated successfully"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Asset not found"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Invalid parameter path or value"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Update an asset parameter",
        "tags": [
          "MCP Asset",
          "MCP Asset"
        ]
      }
    },
    "/mcp/asset/validate": {
      "post": {
        "description": "Validate the structure and contents of a complete asset configuration blob.",
        "operationId": "validate_asset_mcp_asset_validate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateAssetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAssetResponse"
                }
              }
            },
            "description": "Asset validation completed"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Asset configuration is invalid"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Validate asset configuration",
        "tags": [
          "MCP Asset",
          "MCP Asset"
        ]
      }
    },
    "/modulations/": {
      "get": {
        "operationId": "read_items_modulations__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Modulation"
                  },
                  "title": "Response Read Items Modulations  Get",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Read Items",
        "tags": [
          "modulations"
        ]
      },
      "post": {
        "operationId": "create_item_modulations__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModulationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modulation"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Create Item",
        "tags": [
          "modulations"
        ]
      }
    },
    "/modulations/{item_id}": {
      "delete": {
        "operationId": "delete_item_modulations__item_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modulation"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Delete Item",
        "tags": [
          "modulations"
        ]
      },
      "get": {
        "operationId": "read_item_modulations__item_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modulation"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Read Item",
        "tags": [
          "modulations"
        ]
      },
      "put": {
        "operationId": "update_item_modulations__item_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModulationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modulation"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Update Item",
        "tags": [
          "modulations"
        ]
      }
    },
    "/patch_ratings": {
      "post": {
        "description": "Record a human rating for a patch.",
        "operationId": "submit_rating_patch_ratings_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRatingScore"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchRating"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Submit Rating",
        "tags": [
          "patches",
          "patches"
        ]
      }
    },
    "/ping": {
      "get": {
        "description": "Health check endpoint that returns request ID for correlation testing.",
        "operationId": "ping_ping_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          }
        },
        "summary": "Ping"
      }
    },
    "/protobuf-assets/": {
      "post": {
        "operationId": "create_asset_proto_protobuf_assets__post",
        "requestBody": {
          "content": {
            "application/x-protobuf": {
              "schema": {
                "format": "binary",
                "title": "Body",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/x-protobuf": {}
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Create Asset Proto",
        "tags": [
          "protobuf-assets"
        ]
      }
    },
    "/protobuf-assets/from-synesthetic/{syn_asset_id}": {
      "post": {
        "operationId": "create_from_synesthetic_protobuf_assets_from_synesthetic__syn_asset_id__post",
        "parameters": [
          {
            "in": "path",
            "name": "syn_asset_id",
            "required": true,
            "schema": {
              "title": "Syn Asset Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/x-protobuf": {}
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Create From Synesthetic",
        "tags": [
          "protobuf-assets"
        ]
      }
    },
    "/protobuf-assets/{asset_id}": {
      "delete": {
        "operationId": "delete_asset_proto_protobuf_assets__asset_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "title": "Asset Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Delete Asset Proto",
        "tags": [
          "protobuf-assets"
        ]
      },
      "get": {
        "operationId": "get_asset_proto_protobuf_assets__asset_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "title": "Asset Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/x-protobuf": {}
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Get Asset Proto",
        "tags": [
          "protobuf-assets"
        ]
      },
      "put": {
        "operationId": "update_asset_proto_protobuf_assets__asset_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "title": "Asset Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-protobuf": {
              "schema": {
                "format": "binary",
                "title": "Body",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/x-protobuf": {}
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Update Asset Proto",
        "tags": [
          "protobuf-assets"
        ]
      }
    },
    "/rule-bundles/": {
      "post": {
        "description": "Create a new rule bundle.",
        "operationId": "create_bundle_rule_bundles__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleBundleSchema-Input"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleBundleSchema-Output"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Create Bundle",
        "tags": [
          "Rule Bundles"
        ]
      }
    },
    "/rule-bundles/import": {
      "post": {
        "description": "Import a rule bundle from an uploaded JSON file.",
        "operationId": "import_bundle_rule_bundles_import_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_import_bundle_rule_bundles_import_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleBundleSchema-Output"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Import Bundle",
        "tags": [
          "Rule Bundles"
        ]
      }
    },
    "/rule-bundles/{bundle_id}": {
      "get": {
        "description": "Retrieve a rule bundle by ID.",
        "operationId": "get_bundle_rule_bundles__bundle_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "bundle_id",
            "required": true,
            "schema": {
              "title": "Bundle Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleBundleSchema-Output"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "summary": "Get Bundle",
        "tags": [
          "Rule Bundles"
        ]
      }
    },
    "/search/assets": {
      "post": {
        "description": "Return asset IDs most similar to ``query.embedding`` (client-supplied vector).",
        "operationId": "search_assets_search_assets_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "integer"
                  },
                  "title": "Response Search Assets Search Assets Post",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Search Assets",
        "tags": [
          "search",
          "search"
        ]
      }
    },
    "/shader_libs/": {
      "get": {
        "operationId": "read_items_shader_libs__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ShaderLib"
                  },
                  "title": "Response Read Items Shader Libs  Get",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Read Items",
        "tags": [
          "shader_libs"
        ]
      },
      "post": {
        "operationId": "create_item_shader_libs__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShaderLibCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShaderLib"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Create Item",
        "tags": [
          "shader_libs"
        ]
      }
    },
    "/shader_libs/{id}/helpers/{name}/effective": {
      "get": {
        "description": "Return merged uniforms and input parameters for a helper.",
        "operationId": "get_effective_helper_shader_libs__id__helpers__name__effective_get",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "title": "Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "title": "Name",
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "authorization",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "inputParametersSpec": [
                    {
                      "default": 0.0,
                      "max": 1.0,
                      "min": -1.0,
                      "name": "positionX",
                      "parameter": "u_px",
                      "path": "u_px",
                      "smoothingTime": 0.05,
                      "step": 0.01,
                      "type": "float"
                    },
                    {
                      "default": 0.5,
                      "max": 2.0,
                      "min": 0.1,
                      "name": "radius",
                      "parameter": "u_r",
                      "path": "u_r",
                      "smoothingTime": 0.05,
                      "step": 0.01,
                      "type": "float"
                    }
                  ],
                  "template": {
                    "valid": true,
                    "warnings": []
                  },
                  "uniforms": [
                    "u_time",
                    "u_resolution",
                    "u_backgroundColor",
                    "u_gridSize",
                    "u_gridColor",
                    "u_px",
                    "u_py",
                    "u_r"
                  ]
                },
                "schema": {}
              }
            },
            "description": "Merged uniforms and input parameters"
          },
          "422": {
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "code": "COLLISION_BASE_PARAMETER",
                      "loc": [
                        "body",
                        "helpers",
                        "sdHexagon",
                        "requires",
                        "inputParametersSpec",
                        0,
                        "parameter"
                      ],
                      "msg": "duplicates base parameter 'u_px'",
                      "type": "value_error"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Get Effective Helper",
        "tags": [
          "shader_libs"
        ]
      }
    },
    "/shader_libs/{item_id}": {
      "delete": {
        "operationId": "delete_item_shader_libs__item_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShaderLib"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Delete Item",
        "tags": [
          "shader_libs"
        ]
      },
      "get": {
        "operationId": "read_item_shader_libs__item_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShaderLib"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Read Item",
        "tags": [
          "shader_libs"
        ]
      },
      "put": {
        "operationId": "update_item_shader_libs__item_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShaderLibCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShaderLib"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Update Item",
        "tags": [
          "shader_libs"
        ]
      }
    },
    "/shaders/": {
      "get": {
        "operationId": "read_items_shaders__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Shader"
                  },
                  "title": "Response Read Items Shaders  Get",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Read Items",
        "tags": [
          "shaders"
        ]
      },
      "post": {
        "operationId": "create_item_shaders__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShaderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shader"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Create Item",
        "tags": [
          "shaders"
        ]
      }
    },
    "/shaders/{item_id}": {
      "delete": {
        "operationId": "delete_item_shaders__item_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shader"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Delete Item",
        "tags": [
          "shaders"
        ]
      },
      "get": {
        "operationId": "read_item_shaders__item_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shader"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Read Item",
        "tags": [
          "shaders"
        ]
      },
      "put": {
        "operationId": "update_item_shaders__item_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShaderUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shader"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Update Item",
        "tags": [
          "shaders"
        ]
      }
    },
    "/synesthetic-assets/": {
      "get": {
        "operationId": "get_synesthetic_assets_synesthetic_assets__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SynestheticAssetResponse"
                  },
                  "title": "Response Get Synesthetic Assets Synesthetic Assets  Get",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Get Synesthetic Assets",
        "tags": [
          "synesthetic-assets"
        ]
      },
      "post": {
        "operationId": "create_synesthetic_asset_synesthetic_assets__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynestheticAssetCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynestheticAssetResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Create Synesthetic Asset",
        "tags": [
          "synesthetic-assets"
        ]
      }
    },
    "/synesthetic-assets/apply/{asset_id}/{patch_id}": {
      "put": {
        "description": "Apply a staged component patch and persist the changes.",
        "operationId": "apply_stored_patch_synesthetic_assets_apply__asset_id___patch_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "title": "Asset Id",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "patch_id",
            "required": true,
            "schema": {
              "title": "Patch Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedSynestheticAssetResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Apply Stored Patch",
        "tags": [
          "synesthetic-assets"
        ]
      }
    },
    "/synesthetic-assets/nested": {
      "post": {
        "description": "Create a synesthetic asset with nested components",
        "operationId": "create_nested_synesthetic_asset_synesthetic_assets_nested_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NestedSynestheticAssetCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedSynestheticAssetResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Create Nested Synesthetic Asset",
        "tags": [
          "synesthetic-assets"
        ]
      }
    },
    "/synesthetic-assets/nested/{asset_id}": {
      "get": {
        "operationId": "get_nested_synesthetic_asset_synesthetic_assets_nested__asset_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "title": "Asset Id",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "preview_patch_id",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Preview Patch Id"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewNestedAssetResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Get Nested Synesthetic Asset",
        "tags": [
          "synesthetic-assets"
        ]
      }
    },
    "/synesthetic-assets/offset/": {
      "get": {
        "description": "Get synesthetic assets with offset and limit (pagination), nested format, DB only",
        "operationId": "get_synesthetic_assets_offset_synesthetic_assets_offset__get",
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "title": "Offset",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "title": "Limit",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NestedSynestheticAsset"
                  },
                  "title": "Response Get Synesthetic Assets Offset Synesthetic Assets Offset  Get",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Get Synesthetic Assets Offset",
        "tags": [
          "synesthetic-assets"
        ]
      }
    },
    "/synesthetic-assets/{asset_id}": {
      "delete": {
        "operationId": "delete_synesthetic_asset_synesthetic_assets__asset_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "title": "Asset Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynestheticAssetResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Delete Synesthetic Asset",
        "tags": [
          "synesthetic-assets"
        ]
      },
      "get": {
        "operationId": "get_synesthetic_asset_synesthetic_assets__asset_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "title": "Asset Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynestheticAssetResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Get Synesthetic Asset",
        "tags": [
          "synesthetic-assets"
        ]
      },
      "put": {
        "operationId": "update_synesthetic_asset_synesthetic_assets__asset_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "title": "Asset Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynestheticAssetUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynestheticAssetResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Update Synesthetic Asset",
        "tags": [
          "synesthetic-assets"
        ]
      }
    },
    "/synesthetic-assets/{asset_id}/haptic": {
      "put": {
        "description": "Update the haptic component for a synesthetic asset.",
        "operationId": "update_asset_haptic_synesthetic_assets__asset_id__haptic_put",
        "parameters": [
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "title": "Asset Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HapticUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedSynestheticAssetResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Update Asset Haptic",
        "tags": [
          "synesthetic-assets"
        ]
      }
    },
    "/synesthetic-assets/{asset_id}/shader": {
      "put": {
        "description": "Update the shader component for a synesthetic asset.",
        "operationId": "update_asset_shader_synesthetic_assets__asset_id__shader_put",
        "parameters": [
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "title": "Asset Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShaderUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedSynestheticAssetResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Update Asset Shader",
        "tags": [
          "synesthetic-assets"
        ]
      }
    },
    "/synesthetic-assets/{asset_id}/tone": {
      "put": {
        "description": "Update the tone component for a synesthetic asset.",
        "operationId": "update_asset_tone_synesthetic_assets__asset_id__tone_put",
        "parameters": [
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "title": "Asset Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToneUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NestedSynestheticAssetResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Update Asset Tone",
        "tags": [
          "synesthetic-assets"
        ]
      }
    },
    "/tones/": {
      "get": {
        "operationId": "get_tones_tones__get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Tone"
                  },
                  "title": "Response Get Tones Tones  Get",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Get Tones",
        "tags": [
          "tones"
        ]
      },
      "post": {
        "operationId": "create_tone_tones__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToneCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tone"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Create Tone",
        "tags": [
          "tones"
        ]
      }
    },
    "/tones/{tone_id}": {
      "delete": {
        "operationId": "delete_tone_tones__tone_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "tone_id",
            "required": true,
            "schema": {
              "title": "Tone Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tone"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Delete Tone",
        "tags": [
          "tones"
        ]
      },
      "get": {
        "operationId": "get_tone_tones__tone_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "tone_id",
            "required": true,
            "schema": {
              "title": "Tone Id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tone"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Get Tone",
        "tags": [
          "tones"
        ]
      },
      "put": {
        "operationId": "update_tone_tones__tone_id__put",
        "parameters": [
          {
            "in": "path",
            "name": "tone_id",
            "required": true,
            "schema": {
              "title": "Tone Id",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToneUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tone"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "summary": "Update Tone",
        "tags": [
          "tones"
        ]
      }
    }
  }
}
